<?php

require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__) . '/../Biriani.php';

/**
 * Test class for Biriani.
 * Generated by PHPUnit on 2012-02-04 at 04:23:32.
 */
class BirianiTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Biriani
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Biriani();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * 
     */
    public function testSet_cache_duration() {

        $this->object->set_cache_duration(60 * 60 * 1);
        $this->assertTrue($this->object->get_cache_duration() === 60 * 60 * 1);
    }

    /**
     * @depends testSet_cache_duration() 
     */
    public function testGet_cache_duration() {
        // Remove the following lines when you implement this test.
        $this->assertTrue($this->object->get_cache_duration() === 60 * 60 * 1);
    }

    public function testCacheLocationWritable() {
        $this->object->set_cache_location("/tmp");
        $this->assertTrue($this->object->get_cache_location() === '/tmp');
    }

    public function testCacheLocationNotWritable() {
        $this->object->set_cache_location("/root");
        $this->assertFalse($this->object->get_cache_location() === '/root');
    }

    public function testCacheLocationNotWritableUnchangable() {
        $this->object->set_cache_location("/tmp");
        $this->object->set_cache_location("/root");
        $this->assertTrue($this->object->get_cache_location() === '/tmp');
    }

    public function provideDataForParseContentType() {
        return array(
            array("content-type: text/html", "text/html"),
            array("content-type: text/html ", "text/html"),
            array("content-type: text/html; charset=utf-8", "text/html"),
            array("content-type: text/html ; charset=utf-8", "text/html"),
            array("content-type: text/html ;charset=utf-8", "text/html"),
            array("content-type: text/html;charset=utf-8", "text/html"),
            array("text/html", "text/html"),
            array("text/html ", "text/html"),
            array("text/html; charset=utf-8", "text/html"),
            array("text/html ; charset=utf-8", "text/html"),
            array("text/html ;charset=utf-8", "text/html"),
            array("text/html;charset=utf-8", "text/html")
        );
    }

    /**
     * @dataProvider provideDataForParseContentType
     * @param type $header
     * @param type $expected 
     */
    public function testParseContentType($header, $expected) {
        preg_match('#(\w+/\w+)#', $header, $m);
        $actual = $m[1];
        $this->assertEquals($expected, $actual);
    }

    public function provideUrls() {
        return array(
            array('http://fbrss.com/f/8cf9dd9c680b079f4e8e5bde1a3b9455.xml'),
            array('http://shiplu.mokadd.im/feed/'),
            array('http://blog.imgsign.com/feed/'),
            array('http://forum.projanmo.com/rss.php?type=RSS'),
            array('http://ws.audioscrobbler.com/1.0/user/mokaddim/recenttracks.rss'),
            array('http://news.google.com.sa/news?pz=1&cf=all&ned=ar_sa&hl=ar&output=rss'),
            array('http://www.rongmohol.com/feed-atom.xml'),
            array('http://api.twitter.com/1/statuses/user_timeline.atom?screen_name=shiplu')
        );
    }

    /**
     * @dataProvider provideUrls
     */
    public function testUrlLoad($url) {
        /** @var {$this->b} Biriani */
        $this->object->setUrl($url);
        $u = $this->object->getUrl();
        $this->assertEquals($url, $u);
    }

    /**
     * @todo Implement testFetch_data().
     */
    public function testFetch_data() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGet_cache_file_name().
     */
    public function testGet_cache_file_name() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testIs_cache_valid().
     */
    public function testIs_cache_valid() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGet_cached_response().
     */
    public function testGet_cached_response() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSet_cached_response().
     */
    public function testSet_cached_response() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testExecute().
     */
    public function testExecute() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testExtract_data().
     */
    public function testExtract_data() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGet_extractor().
     */
    public function testGet_extractor() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testClear_cache().
     */
    public function testClear_cache() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}

?>
